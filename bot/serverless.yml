
service: pokebot 

frameworkVersion: '2'

package:
  exclude:
    - config.*.yml
    - Gemfile
    - Gemfile.lock
    - spec/**

provider:
  name: aws
  runtime: ruby2.5
  profile: pokebot-deploy
  stage: ${opt:stage} 
  region: ${self:custom.config.region}
  environment:
    REGION: ${self:provider.region}
    GEM_PATH: /opt/ruby/2.5.0
    HONEYBADGER_API_KEY: ${file(config.${self:provider.stage}.yml):honeybadger_api_key}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: !Ref SNSMessagesTopic # !Ref returns the ARN of SNSMessages in the resources element below:
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: !Ref SNSRecipes # !Ref returns the ARN of SNSMessages in the resources element below:
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: !Ref SNSUserTopic # !Ref returns the ARN of SNSMessages in the resources element below:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        Fn::GetAtt:
          - FavouritesTable
          - Arn
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        Fn::GetAtt:
          - RecipeFavouritesTable
          - Arn

layers:
  gems:
    path: ../layers/gems
    compatibleRuntimes:
      - ruby2.5

custom:
  config: ${file(config.${self:provider.stage}.yml)}
  favourites_table: ${self:service}-${self:provider.stage}-favourites-service-favourites
  recipe_favourites_table: ${self:service}-${self:provider.stage}-recipe-service-favourites
 
functions:
  messages:
    handler: handlers/messages.Messages::Handler.handle
    layers:
      - {Ref: GemsLambdaLayer}
    events:
      - httpApi:
          method: POST 
          path:  /messages
    environment:
      SLACK_SIGNED_SECRET: ${self:custom.config.slack_signed_secret}
      MESSAGES_TOPIC_ARN: !Ref SNSMessagesTopic

  intent:
    handler: handlers/intent.Intent::Handler.handle
    layers:
      - {Ref: GemsLambdaLayer}
    events:    
      - sqs:
         arn:
           Fn::GetAtt:
             - SQSMessagesTopicToIntentQueue
             - Arn  
    environment:
      RECIPES_TOPIC_ARN: !Ref SNSRecipes

  recipe:
    handler: handlers/recipes.Recipes::Handler.handle
    layers:
      - {Ref: GemsLambdaLayer}
    events:
      - sqs:
         arn:
           Fn::GetAtt:
             - SQSRecipesTopicToRecipeQueue
             - Arn  
      - sqs:
         arn:
           Fn::GetAtt:
             - SQSUserTopicToRecipeQueue
             - Arn  
    environment:
      RECIPES_TOPIC_ARN: !Ref SNSRecipes
      SPOONACULAR_API_KEY: ${self:custom.config.spoonacular_api_key}
      SPOONACULAR_ENDPOINT: ${self:custom.config.spoonacular_endpoint}
      FAVOURITES_TABLE_NAME: ${self:custom.recipe_favourites_table}

  responder:
    handler: handlers/responder.Responder::Handler.handle
    layers:
      - {Ref: GemsLambdaLayer}
    events:
      - sqs:
         arn:
           Fn::GetAtt:
             - SQSResponder
             - Arn
      - sqs:
         arn:
           Fn::GetAtt:
             - SQSMessagesToResponder
             - Arn
      - sqs:
         arn:
           Fn::GetAtt:
             - SNSUsersToSQSResponder
             - Arn
    environment:
      BOT_USER_OAUTH_ACCESS_TOKEN: ${file(config.${self:provider.stage}.yml):bot_user_oauth_access_token}  

  notifier:
    handler: handlers/notifier.Notifier::Handler.handle
    layers:
      - {Ref: GemsLambdaLayer}
    environment:
      POKEBOT_TESTER_NOTIFICATION_URI: ${file(config.${self:provider.stage}.yml):pokebot_tester_notification_uri}  
  
  interactions:
    handler: handlers/interactions.Interactions::Handler.handle
    layers:
      - {Ref: GemsLambdaLayer}
    events:
      - httpApi:
          method: POST 
          path:  /interactions
    environment:
      RECIPES_TOPIC_ARN: !Ref SNSRecipes
      USERS_TOPIC_ARN: !Ref SNSUserTopic

  command:
    handler: handlers/command.Command::Handler.handle
    layers:
      - {Ref: GemsLambdaLayer}
    events:
      - httpApi:
          method: POST 
          path:  /command
    environment:
      RECIPES_TOPIC_ARN: !Ref SNSRecipes
      USERS_TOPIC_ARN: !Ref SNSUserTopic
  
  user:
    handler: handlers/user.User::Handler.handle
    layers:
      - {Ref: GemsLambdaLayer}
    events:
      - sqs:
         arn:
           Fn::GetAtt:
             - SQSUser
             - Arn
    environment:
      FAVOURITES_TABLE_NAME: ${self:custom.favourites_table}
      USERS_TOPIC_ARN: !Ref SNSUserTopic



resources:
  Resources:

    #################################
    # Messages Service: Messages Topic
    #################################
    SNSMessagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-messages-topic
   


    #########################################################################
    # Intent Service: SNS Messages Topic -> SQS Intent Queue & Policy
    #########################################################################
    SQSMessagesTopicToIntentQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-messages-to-sqs-intent-queue
    MessagesTopicToIntentQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSMessagesTopic
        Endpoint: !GetAtt
          - SQSMessagesTopicToIntentQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - SNSMessagesTopic
        - SQSMessagesTopicToIntentQueue
    SnSMessagesTopictoSQSIntentQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - SQSMessagesTopicToIntentQueue 
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref SNSMessagesTopic
        Queues:
          - Ref: SQSMessagesTopicToIntentQueue
      DependsOn:
        - MessagesTopicToIntentQueueSubscription

    #########################################################################
    # Recipe Service: SNS  Topic -> SQS Recipe Queue & Policy
    #########################################################################
    SQSRecipesTopicToRecipeQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-recipes-to-sqs-recipe-queue
    RecipesTopicToRecipeQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSRecipes
        Endpoint: !GetAtt
          - SQSRecipesTopicToRecipeQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - SNSRecipes
        - SQSRecipesTopicToRecipeQueue
    SnSRecipesTopictoSQSRecipeQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - SQSRecipesTopicToRecipeQueue 
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref SNSRecipes
        Queues:
          - Ref: SQSRecipesTopicToRecipeQueue
      DependsOn:
        - RecipesTopicToRecipeQueueSubscription

    #########################################   
    # Recipe Service: SNS Recipes Topic
    ##########################################
    SNSRecipes:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-recipes-topic






    #########################################################################
    # Responder Service: SNS Recipes Topic -> SQS Responder Queue & Policy
    #########################################################################
    SQSResponder:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-recipes-sqs-responder-queue
    ResponsesQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSRecipes
        Endpoint: !GetAtt
          - SQSResponder
          - Arn
        Protocol: sqs
      DependsOn:
        - SNSRecipes
        - SQSResponder
    SnSResponsestoSQSResponderPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-responses"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - SQSResponder 
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref SNSRecipes
        Queues:
          - Ref: SQSResponder
      DependsOn:
        - ResponsesQueueSubscription


    #########################################################################
    # Responder Service: SNS Messages Topic -> SQS Responder Queue & Policy
    #########################################################################
    SQSMessagesToResponder:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-messages-to-sqs-responder-queue
    MessagesToResponsesQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSMessagesTopic
        Endpoint: !GetAtt
          - SQSMessagesToResponder
          - Arn
        Protocol: sqs
      DependsOn:
        - SNSMessagesTopic
        - SQSMessagesToResponder
    SnSMessagestoSQSResponderPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-responses"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - SQSMessagesToResponder 
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref SNSMessagesTopic
        Queues:
          - Ref: SQSMessagesToResponder
      DependsOn:
        - MessagesToResponsesQueueSubscription


    #########################################################################
    # Responder Service: SNS Users Topic -> SQS Responder Queue & Policy
    #########################################################################
    SNSUsersToSQSResponder:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-users-sqs-responder-queue
    SNSUsersToSQSResponderQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSUserTopic
        Endpoint: !GetAtt
          - SNSUsersToSQSResponder
          - Arn
        Protocol: sqs
      DependsOn:
        - SNSUserTopic
        - SNSUsersToSQSResponder
    SNSUserstoSQSResponderPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-responses"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - SNSUsersToSQSResponder 
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref SNSUserTopic
        Queues:
          - Ref: SNSUsersToSQSResponder
      DependsOn:
        - SNSUsersToSQSResponderQueueSubscription

    ###################################################
    # User Service: SNS Interactions -> User SQS Queue & Policy
    ###################################################    
    SQSUser:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-user-to-sqs-user-queue
    UsersQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSUserTopic
        Endpoint: !GetAtt
          - SQSUser
          - Arn
        Protocol: sqs
      DependsOn:
        - SNSUserTopic
        - SQSUser
    SnSUsertoSQSUserPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-responses"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - SQSUser 
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref SNSUserTopic
        Queues:
          - Ref: SQSUser
      DependsOn:
        - UsersQueueSubscription

    #######################################
    # User Service: Favourites Table
    ######################################      
    FavouritesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.favourites_table}
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH 
        BillingMode: PAY_PER_REQUEST
   
    ##########################################
    # User Service: User SNS Topic
    ##########################################
    SNSUserTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-sns-user-topic


    ###########################################################################
    # Recipe Service: SNS User Topic -> SQS Recipe Queue & Policy
    ###########################################################################
    SQSUserTopicToRecipeQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-user-to-sqs-recipe-queue
    UserTopicToRecipeQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref SNSUserTopic
        Endpoint: !GetAtt
          - SQSUserTopicToRecipeQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - SNSUserTopic
        - SQSUserTopicToRecipeQueue
    SnSUserToSQSRecipeQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - SQSUserTopicToRecipeQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref SNSUserTopic
        Queues:
          - Ref: SQSUserTopicToRecipeQueue
      DependsOn:
        - UserTopicToRecipeQueueSubscription
    
    #######################################
    # Recipe Service: Favourites Table
    ######################################      
    RecipeFavouritesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.recipe_favourites_table}
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH 
        BillingMode: PAY_PER_REQUEST
