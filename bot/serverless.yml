
service: gerty

plugins:
  - serverless-ruby-layer

frameworkVersion: '2'

package:
  exclude:
    - config.*.yml
    - Gemfile
    - Gemfile.lock
    - spec/**
    - scripts/**
    - generators/**
    - data/**
    - nlp/**
    - node_modules/**


provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: ruby2.7
  profile: pokebot-deploy
  stage: ${opt:stage} 
  region: ${self:custom.config.region}
  environment:
    REGION: ${self:provider.region}
    GEM_PATH: /opt/ruby/2.5.0
    HONEYBADGER_API_KEY: ${file(config.${self:provider.stage}.yml):honeybadger_api_key}
    BOT_ENV: ${self:provider.stage}
    USERS_TABLE_NAME: ${self:custom.users_table}
    TEAM_IDS: T010JM31KJ9
    KANBANIZE_TEAMS_TABLE_NAME: ${self:custom.kanbanize_teams_table}

  iamRoleStatements:

    # TODO tighten this so that only the correct data api action are allowed
    - Effect: "Allow"
      Action:
        - "rds-data:*"
      Resource: "*"

    # TODO tighten this so that only the correct db secrets for the data api are allowed
    - Effect: "Allow"
      Action:
        - "secretsmanager:*"
      Resource: "*"

    - Effect: Allow
      Action:
        - "rds-db:connect"
      Resource: 
        - "${self:custom.config.kanbanize_database.cluster}"

    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - "Fn::GetAtt": [ KanbanizeImportBucket, Arn ]
    - Effect: "Allow"
      Action:
        - "s3:*Object"
      Resource:
        - "Fn::Join": ['/', ["Fn::GetAtt": [ KanbanizeImportBucket, Arn ], '*']] # * is all objects


    #AUTO-BEGIN-TOPIC-ROLE-STATEMENTS
    # IMPORTANT !!!!!!! 
    # Any content between here and AUTO-END-TOPIC-ROLE-STATEMENTS will be overwritten.
    

    # ALLOW THE iamRole TO PUBLISH TO THE 'messages' SNS Topic
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: !Ref MessagesSnsTopic # !Ref returns the ARN of SNS topic in the resources element below:
    

    # ALLOW THE iamRole TO PUBLISH TO THE 'recipes' SNS Topic
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: !Ref RecipesSnsTopic # !Ref returns the ARN of SNS topic in the resources element below:
    

    # ALLOW THE iamRole TO PUBLISH TO THE 'users' SNS Topic
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: !Ref UsersSnsTopic # !Ref returns the ARN of SNS topic in the resources element below:
    

    # ALLOW THE iamRole TO PUBLISH TO THE 'kanbanize' SNS Topic
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: !Ref KanbanizeSnsTopic # !Ref returns the ARN of SNS topic in the resources element below:
    

    # ALLOW THE iamRole TO PUBLISH TO THE 'insights' SNS Topic
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: !Ref InsightsSnsTopic # !Ref returns the ARN of SNS topic in the resources element below:
    

    # ALLOW THE iamRole TO PUBLISH TO THE 'cron' SNS Topic
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: !Ref CronSnsTopic # !Ref returns the ARN of SNS topic in the resources element below:
    

    #AUTO-END-TOPIC-ROLE-STATEMENTS

    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        Fn::GetAtt:
          - UsersTable
          - Arn

    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
         - Fn::GetAtt:
            - MovementsTable
            - Arn
         - Fn::Join: ['/', ["Fn::GetAtt": [ MovementsTable, Arn ], 'index','*']] # * is all objects

    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
         - Fn::GetAtt:
            - NamedCyclesTable
            - Arn
         - Fn::Join: ['/', ["Fn::GetAtt": [ NamedCyclesTable, Arn ], 'index','*']] # * is all objects

    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
         - Fn::GetAtt:
            - CyclesTable
            - Arn
         - Fn::Join: ['/', ["Fn::GetAtt": [ CyclesTable, Arn ], 'index','*']] # * is all objects



    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
         - Fn::GetAtt:
            - ActivitiesTable
            - Arn
         - Fn::Join: ['/', ["Fn::GetAtt": [ ActivitiesTable, Arn ], 'index','*']] # * is all objects
    
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
         - Fn::GetAtt:
            - TasksTable
            - Arn
         - Fn::Join: ['/', ["Fn::GetAtt": [ TasksTable, Arn ], 'index','*']] # * is all objects

    # - Effect: "Allow"
    #   Action:
    #     - dynamodb:DescribeTable
    #     - dynamodb:Query
    #     - dynamodb:GetItem
    #     - dynamodb:BatchGetItem
    #     - dynamodb:PutItem
    #     - dynamodb:UpdateItem
    #     - dynamodb:DeleteItem
    #     - dynamodb:BatchWriteItem
    #   Resource:
    #      - Fn::GetAtt:
    #         - HistoryDetailsTable
    #         - Arn
    #      - Fn::Join: ['/', ["Fn::GetAtt": [ HistoryDetailsTable, Arn ], 'index','*']] # * is all objects


    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        Fn::GetAtt:
          - RecipeFavouritesTable
          - Arn
          
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        Fn::GetAtt:
          - KanbanizeClientsTable
          - Arn

custom:
  config: ${file(config.${self:provider.stage}.yml)}
  kanbanize_tasks_table: ${self:service}-${self:provider.stage}-insights-service-tasks
  kanbanize_history_details_table: ${self:service}-${self:provider.stage}-insights-service-history-details
  kanbanize_activities_table: ${self:service}-${self:provider.stage}-insights-service-activities
  users_table: ${self:service}-${self:provider.stage}-users-service-users
  recipe_favourites_table: ${self:service}-${self:provider.stage}-recipe-service-favourites
  kanbanize_teams_table: ${self:service}-${self:provider.stage}-kanbanize-teams
  kanbanize_imports_bucket: ${self:service}-${self:provider.stage}-kanbanize-imports
  kanbanize_section_stays_table: ${self:service}-${self:provider.stage}-kanbanize-section-stays
  kanbanize_column_stays_table: ${self:service}-${self:provider.stage}-kanbanize-column-stays
  insights_movements_table: ${self:service}-${self:provider.stage}-insights-movements
  insights_named_cycles_table: ${self:service}-${self:provider.stage}-named-cycles
  insights_cycles_table: ${self:service}-${self:provider.stage}-cycles

  rubyLayer:
    use_docker: true

functions:
  util:
    handler: gerty/listeners/util.Util::Handler.handle
    environment:
      KANBANIZE_TEAMS_TABLE_NAME: kanbanize_teams_table 

  messages:
    handler: gerty/listeners/slack_api_gateway.SlackApiGateway::Handler.handle
    events:
      - httpApi:
          method: POST 
          path:  /messages
    environment:
      SLACK_SIGNED_SECRET: ${self:custom.config.slack_signed_secret}
      MESSAGES_TOPIC_ARN: !Ref MessagesSnsTopic
  
  insight:
    handler: gerty/listeners/sqs.Handler::Sqs.handle
    events:    
      - sqs:
         arn:
           Fn::GetAtt:
             - InsightsToInsightSqsQueue
             - Arn
    environment:
      INSIGHTS_TOPIC_ARN: !Ref InsightsSnsTopic 
      INSIGHTS_MOVEMENTS_TABLE_NAME: ${self:custom.insights_movements_table}

  named_cycles:
    handler: gerty/listeners/cron.Cron::Handler.handle
    events:
      # - schedule: 
      #     name: 'named-cycles-schedule'
      #     description: 'schedule for service that checks for active named cycles'
      #     rate: cron(*/2 * * * ? *) #note the ? (not *) for day of month is needed because we have set 1-5 for day of week. 
      #     input:
      #       action: 'build_active_cycles'
      #       source: 'cron'
      #       bounded_context: 'insight'
    environment:
      INSIGHTS_NAMED_CYCLES_TABLE_NAME: ${self:custom.insights_named_cycles_table}
      INSIGHTS_MOVEMENTS_TABLE_NAME: ${self:custom.insights_movements_table}
      INSIGHTS_CYCLES_TABLE_NAME: ${self:custom.insights_cycles_table}



 
  intent:
    handler: gerty/listeners/sqs.Handler::Sqs.handle
    events:    
      - sqs:
         arn:
           Fn::GetAtt:
             - MessagesToIntentSqsQueue
             - Arn  
    environment:
      RECIPES_TOPIC_ARN: !Ref RecipesSnsTopic
      USERS_TOPIC_ARN: !Ref UsersSnsTopic
      INSIGHTS_TOPIC_ARN: !Ref InsightsSnsTopic

  recipe:
    handler: gerty/listeners/sqs.Handler::Sqs.handle
    events:
      - sqs:
         arn:
           Fn::GetAtt:
             - RecipesToRecipesSqsQueue
             - Arn  
      - sqs:
         arn:
           Fn::GetAtt:
             - UsersToRecipesSqsQueue
             - Arn  
    environment:
      RECIPES_TOPIC_ARN: !Ref RecipesSnsTopic
      SPOONACULAR_API_KEY: ${self:custom.config.spoonacular_api_key}
      FAVOURITES_TABLE_NAME: ${self:custom.recipe_favourites_table}

  responder:
    handler: gerty/listeners/sqs.Handler::Sqs.handle
    events:
      - sqs:
         arn:
           Fn::GetAtt:
             - RecipesToResponderSqsQueue
             - Arn
      - sqs:
         arn:
           Fn::GetAtt:
             - MessagesToResponderSqsQueue
             - Arn
      - sqs:
         arn:
           Fn::GetAtt:
             - UsersToResponderSqsQueue
             - Arn
      - sqs:
         arn:
           Fn::GetAtt:
             - InsightsToResponderSqsQueue
             - Arn

    environment:
      BOT_USER_OAUTH_ACCESS_TOKEN: ${file(config.${self:provider.stage}.yml):bot_user_oauth_access_token}
      KANBANIZE_TEAMS_TABLE_NAME: ${self:custom.kanbanize_teams_table}
        
  interactions:
    handler: gerty/listeners/slack_interactions_gateway.Interactions::Handler.handle
    events:
      - httpApi:
          method: POST 
          path:  /interactions
    environment:
      RECIPES_TOPIC_ARN: !Ref RecipesSnsTopic
      USERS_TOPIC_ARN: !Ref UsersSnsTopic

  command:
    handler: gerty/listeners/command.Command::Handler.handle
    events:
      - httpApi:
          method: POST 
          path:  /command
    environment:
      RECIPES_TOPIC_ARN: !Ref RecipesSnsTopic
      USERS_TOPIC_ARN: !Ref UsersSnsTopic
  
  user:
    handler: gerty/listeners/sqs.Handler::Sqs.handle
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - UsersToUsersSqsQueue
              - Arn
    environment:
      USERS_TABLE_NAME: ${self:custom.users_table}
      USERS_TOPIC_ARN: !Ref UsersSnsTopic

  kanbanize_cron:
    handler: gerty/listeners/cron.Cron::Handler.handle
    events:
      - schedule: 
          name: 'kanbanize-transitions-blocks-activities'
          description: 'test-rate-schedule'
          rate: cron(*/10 7-22 ? * MON-FRI *) #note the ? (not *) for day of month is needed because we have set 1-5 for day of week. 
          input:
            action: 'kanbanize-import-activities'
            source: 'cron'
            bounded_context: 'kanbanize_cron'
      - schedule: 
          name: 'kanbanize-find-task_ids'
          description: 'find all non archived task ids board by board'
          rate: cron(0 6 * * ? *) #note the ? (not *) for day of month is needed because we have set 1-5 for day of week. 
          input:
            action: 'find_task_ids_for_boards'
            source: 'cron'
            bounded_context: 'kanbanize_cron'
      - schedule: 
          name: 'kanbanize-find-task-ids-archived-yesterday'
          description: 'find tasks archived yesterday'
          rate: cron(0 6 * * ? *) #note the ? (not *) for day of month is needed because we have set 1-5 for day of week. 
          input:
            action: 'find_archive_task_ids_for_boards'
            source: 'cron'
            archive: 'yesterday'
            bounded_context: 'kanbanize_cron'
      - schedule: 
          name: 'pop-command'
          description: 'run pop commands'
          rate: cron(*/10 * * * ? *) #note the ? (not *) for day of month is needed because we have set 1-5 for day of week. 
          input:
            action: 'pop_command'
            source: 'cron'
            bounded_context: 'kanbanize_cron'
            folder: 'cron/10'

    environment:
      KANBANIZE_TEAMS_TABLE_NAME: ${self:custom.kanbanize_teams_table}
      CRON_TOPIC_ARN: !Ref CronSnsTopic
      PAGE_SIZE: 30
      DATE_RANGE_OFFSET: 0
      KANBANIZE_IMPORTS_BUCKET: ${self:custom.kanbanize_imports_bucket}

  kanbanize_imports:
    timeout: 20
    handler: gerty/listeners/sqs.Handler::Sqs.handle
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - KanbanizeToKanbanizeImportsSqsQueue
              - Arn
      - sqs:
          arn:
            Fn::GetAtt:
              - CronToKanbanizeImportsSqsQueue
              - Arn
    environment:
      INSIGHTS_TOPIC_ARN: !Ref InsightsSnsTopic  
      KANBANIZE_TOPIC_ARN: !Ref KanbanizeSnsTopic
      USERS_TOPIC_ARN: !Ref UsersSnsTopic
      KANBANIZE_DB_CLUSTER: ${self:custom.config.kanbanize_database.cluster}
      KANBANIZE_DB_NAME: ${self:custom.config.kanbanize_database.name}
      KANBANIZE_DB_SECRET_ARN: ${self:custom.config.kanbanize_database.secret_arn}
      KANBANIZE_HISTORY_DETAILS_TABLE_NAME: ${self:custom.kanbanize_history_details_table}
      BOARD_ROOT: storage/local/kanbanize/board_structures
      KANBANIZE_ACTIVITIES_TABLE_NAME: ${self:custom.kanbanize_activities_table}
      KANBANIZE_TASKS_TABLE_NAME: ${self:custom.kanbanize_tasks_table}
      

  kanbanize_util:
    handler: gerty/listeners/kanbanize/util.Kanbanize::Util::Handler.handle
    environment:
      KANBANIZE_TEAMS_TABLE_NAME: ${self:custom.kanbanize_teams_table}
      KANBANIZE_TOPIC_ARN: !Ref KanbanizeSnsTopic
      PAGE_SIZE: 30
      KANBANIZE_DB_CLUSTER: ${self:custom.config.kanbanize_database.cluster}
      KANBANIZE_DB_NAME: ${self:custom.config.kanbanize_database.name}
      KANBANIZE_DB_SECRET_ARN: ${self:custom.config.kanbanize_database.secret_arn}

resources:
  Resources:
    
    #AUTO-BEGIN-TOPICS
    # IMPORTANT !!!!!!! 
    # Any content between here and AUTO-END-TOPICS will be overwritten.
    


    #### AUTO GENERATED TOPIC - 'messages' 
    #################################
    MessagesSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-messages
     


    #### AUTO GENERATED QUEUE - 'intent'
    MessagesToIntentSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-messages-to-sqs-intent
    
    #### AUTO GENERATED - ATTACH 'messages' TOPIC to 'intent' QUEUE
    MessagesToIntentSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref MessagesSnsTopic
        Endpoint: !GetAtt
          - MessagesToIntentSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - MessagesSnsTopic
        - MessagesToIntentSqsQueue
    
    #### AUTO GENERATED - ALLOW 'messages' TOPIC to send messages to 'intent' QUEUE
    SnSMessagesToSQSIntentSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - MessagesToIntentSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref MessagesSnsTopic 
        Queues:
          - Ref: MessagesToIntentSqsQueue
      DependsOn:
        - MessagesToIntentSubscription
      


    #### AUTO GENERATED QUEUE - 'responder'
    MessagesToResponderSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-messages-to-sqs-responder
    
    #### AUTO GENERATED - ATTACH 'messages' TOPIC to 'responder' QUEUE
    MessagesToResponderSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref MessagesSnsTopic
        Endpoint: !GetAtt
          - MessagesToResponderSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - MessagesSnsTopic
        - MessagesToResponderSqsQueue
    
    #### AUTO GENERATED - ALLOW 'messages' TOPIC to send messages to 'responder' QUEUE
    SnSMessagesToSQSResponderSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - MessagesToResponderSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref MessagesSnsTopic 
        Queues:
          - Ref: MessagesToResponderSqsQueue
      DependsOn:
        - MessagesToResponderSubscription
      


    #### AUTO GENERATED TOPIC - 'recipes' 
    #################################
    RecipesSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-recipes
     


    #### AUTO GENERATED QUEUE - 'recipes'
    RecipesToRecipesSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-recipes-to-sqs-recipes
    
    #### AUTO GENERATED - ATTACH 'recipes' TOPIC to 'recipes' QUEUE
    RecipesToRecipesSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref RecipesSnsTopic
        Endpoint: !GetAtt
          - RecipesToRecipesSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - RecipesSnsTopic
        - RecipesToRecipesSqsQueue
    
    #### AUTO GENERATED - ALLOW 'recipes' TOPIC to send messages to 'recipes' QUEUE
    SnSRecipesToSQSRecipesSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-recipes"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - RecipesToRecipesSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref RecipesSnsTopic 
        Queues:
          - Ref: RecipesToRecipesSqsQueue
      DependsOn:
        - RecipesToRecipesSubscription
      


    #### AUTO GENERATED QUEUE - 'responder'
    RecipesToResponderSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-recipes-to-sqs-responder
    
    #### AUTO GENERATED - ATTACH 'recipes' TOPIC to 'responder' QUEUE
    RecipesToResponderSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref RecipesSnsTopic
        Endpoint: !GetAtt
          - RecipesToResponderSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - RecipesSnsTopic
        - RecipesToResponderSqsQueue
    
    #### AUTO GENERATED - ALLOW 'recipes' TOPIC to send messages to 'responder' QUEUE
    SnSRecipesToSQSResponderSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-recipes"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - RecipesToResponderSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref RecipesSnsTopic 
        Queues:
          - Ref: RecipesToResponderSqsQueue
      DependsOn:
        - RecipesToResponderSubscription
      


    #### AUTO GENERATED TOPIC - 'users' 
    #################################
    UsersSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-users
     


    #### AUTO GENERATED QUEUE - 'responder'
    UsersToResponderSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-users-to-sqs-responder
    
    #### AUTO GENERATED - ATTACH 'users' TOPIC to 'responder' QUEUE
    UsersToResponderSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref UsersSnsTopic
        Endpoint: !GetAtt
          - UsersToResponderSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - UsersSnsTopic
        - UsersToResponderSqsQueue
    
    #### AUTO GENERATED - ALLOW 'users' TOPIC to send messages to 'responder' QUEUE
    SnSUsersToSQSResponderSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-users"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - UsersToResponderSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref UsersSnsTopic 
        Queues:
          - Ref: UsersToResponderSqsQueue
      DependsOn:
        - UsersToResponderSubscription
      


    #### AUTO GENERATED QUEUE - 'recipes'
    UsersToRecipesSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-users-to-sqs-recipes
    
    #### AUTO GENERATED - ATTACH 'users' TOPIC to 'recipes' QUEUE
    UsersToRecipesSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref UsersSnsTopic
        Endpoint: !GetAtt
          - UsersToRecipesSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - UsersSnsTopic
        - UsersToRecipesSqsQueue
    
    #### AUTO GENERATED - ALLOW 'users' TOPIC to send messages to 'recipes' QUEUE
    SnSUsersToSQSRecipesSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-users"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - UsersToRecipesSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref UsersSnsTopic 
        Queues:
          - Ref: UsersToRecipesSqsQueue
      DependsOn:
        - UsersToRecipesSubscription
      


    #### AUTO GENERATED QUEUE - 'users'
    UsersToUsersSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-users-to-sqs-users
    
    #### AUTO GENERATED - ATTACH 'users' TOPIC to 'users' QUEUE
    UsersToUsersSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref UsersSnsTopic
        Endpoint: !GetAtt
          - UsersToUsersSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - UsersSnsTopic
        - UsersToUsersSqsQueue
    
    #### AUTO GENERATED - ALLOW 'users' TOPIC to send messages to 'users' QUEUE
    SnSUsersToSQSUsersSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-users"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - UsersToUsersSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref UsersSnsTopic 
        Queues:
          - Ref: UsersToUsersSqsQueue
      DependsOn:
        - UsersToUsersSubscription
      


    #### AUTO GENERATED TOPIC - 'kanbanize' 
    #################################
    KanbanizeSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-kanbanize
     


    #### AUTO GENERATED QUEUE - 'kanbanize_imports'
    KanbanizeToKanbanizeImportsSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-kanbanize-to-sqs-kanbanize_imports
    
    #### AUTO GENERATED - ATTACH 'kanbanize' TOPIC to 'kanbanize_imports' QUEUE
    KanbanizeToKanbanizeImportsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref KanbanizeSnsTopic
        Endpoint: !GetAtt
          - KanbanizeToKanbanizeImportsSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - KanbanizeSnsTopic
        - KanbanizeToKanbanizeImportsSqsQueue
    
    #### AUTO GENERATED - ALLOW 'kanbanize' TOPIC to send messages to 'kanbanize_imports' QUEUE
    SnSKanbanizeToSQSKanbanizeImportsSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-kanbanize"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - KanbanizeToKanbanizeImportsSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref KanbanizeSnsTopic 
        Queues:
          - Ref: KanbanizeToKanbanizeImportsSqsQueue
      DependsOn:
        - KanbanizeToKanbanizeImportsSubscription
      


    #### AUTO GENERATED TOPIC - 'insights' 
    #################################
    InsightsSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-insights
     


    #### AUTO GENERATED QUEUE - 'insight'
    InsightsToInsightSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-insights-to-sqs-insight
    
    #### AUTO GENERATED - ATTACH 'insights' TOPIC to 'insight' QUEUE
    InsightsToInsightSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref InsightsSnsTopic
        Endpoint: !GetAtt
          - InsightsToInsightSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - InsightsSnsTopic
        - InsightsToInsightSqsQueue
    
    #### AUTO GENERATED - ALLOW 'insights' TOPIC to send messages to 'insight' QUEUE
    SnSInsightsToSQSInsightSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-insights"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - InsightsToInsightSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref InsightsSnsTopic 
        Queues:
          - Ref: InsightsToInsightSqsQueue
      DependsOn:
        - InsightsToInsightSubscription
      


    #### AUTO GENERATED QUEUE - 'responder'
    InsightsToResponderSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-insights-to-sqs-responder
    
    #### AUTO GENERATED - ATTACH 'insights' TOPIC to 'responder' QUEUE
    InsightsToResponderSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref InsightsSnsTopic
        Endpoint: !GetAtt
          - InsightsToResponderSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - InsightsSnsTopic
        - InsightsToResponderSqsQueue
    
    #### AUTO GENERATED - ALLOW 'insights' TOPIC to send messages to 'responder' QUEUE
    SnSInsightsToSQSResponderSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-insights"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - InsightsToResponderSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref InsightsSnsTopic 
        Queues:
          - Ref: InsightsToResponderSqsQueue
      DependsOn:
        - InsightsToResponderSubscription
      


    #### AUTO GENERATED TOPIC - 'cron' 
    #################################
    CronSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-cron
     


    #### AUTO GENERATED QUEUE - 'kanbanize_imports'
    CronToKanbanizeImportsSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sns-cron-to-sqs-kanbanize_imports
    
    #### AUTO GENERATED - ATTACH 'cron' TOPIC to 'kanbanize_imports' QUEUE
    CronToKanbanizeImportsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref CronSnsTopic
        Endpoint: !GetAtt
          - CronToKanbanizeImportsSqsQueue
          - Arn
        Protocol: sqs
      DependsOn:
        - CronSnsTopic
        - CronToKanbanizeImportsSqsQueue
    
    #### AUTO GENERATED - ALLOW 'cron' TOPIC to send messages to 'kanbanize_imports' QUEUE
    SnSCronToSQSKanbanizeImportsSqsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-cron"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - CronToKanbanizeImportsSqsQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref CronSnsTopic 
        Queues:
          - Ref: CronToKanbanizeImportsSqsQueue
      DependsOn:
        - CronToKanbanizeImportsSubscription
      

    #AUTO-END-TOPICS

    ######################################
    # Insight Service: Activities Details Table
    #####################################      
    ActivitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.kanbanize_activities_table}
        AttributeDefinitions:
          - AttributeName: monkey_key # hash of activity as activity objects have no unique identifiers 
            AttributeType: S
          - AttributeName: date
            AttributeType: S
          - AttributeName: author
            AttributeType: S
        KeySchema:
          - AttributeName: author
            KeyType: HASH
          - AttributeName: monkey_key
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: author_date
            KeySchema:
              - AttributeName: author
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
                ProjectionType: KEYS_ONLY
        BillingMode: PAY_PER_REQUEST


    ######################################
    # Insight Service: History Details Table
    #####################################      
    # HistoryDetailsTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:custom.kanbanize_history_details_table}
    #     AttributeDefinitions:
    #       - AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: id
    #         KeyType: HASH
    #     BillingMode: PAY_PER_REQUEST

    ######################################
    # Insight Service: Tasks Table
    #####################################      
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.kanbanize_tasks_table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
      

    #######################################
    # User Service: Favourites Table
    ######################################      
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.users_table}
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH 
        BillingMode: PAY_PER_REQUEST
   
    #######################################
    # Recipe Service: Favourites Table
    ######################################      
    RecipeFavouritesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.recipe_favourites_table}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH 
        BillingMode: PAY_PER_REQUEST
    
    #######################################
    # Kanbanize Clients Table
    ######################################      
    KanbanizeClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.kanbanize_teams_table}
        AttributeDefinitions:
          -
            AttributeName: team_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH 
        BillingMode: PAY_PER_REQUEST

    #######################################
    # Insights Movements Table
    ######################################      
    MovementsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.insights_movements_table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: team_board_id_from
            AttributeType: S
          - AttributeName: team_board_id_to
            AttributeType: S
          - AttributeName: date
            AttributeType: S
          - AttributeName: task_id
            AttributeType: S
          - AttributeName: index
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH   
        GlobalSecondaryIndexes:
          - IndexName: team_board_id_task_id_to
            KeySchema:
              - AttributeName: team_board_id_to
                KeyType: HASH
              - AttributeName: task_id
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: team_board_id_from_date
            KeySchema:
              - AttributeName: team_board_id_from
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: task_id_index
            KeySchema:
              - AttributeName: task_id
                KeyType: HASH
              - AttributeName: index
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY

        BillingMode: PAY_PER_REQUEST

    #######################################
    # Insights Named Cycles Table
    ######################################      
    NamedCyclesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.insights_named_cycles_table}
        AttributeDefinitions:
          - AttributeName: team_board_id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: next_cycle_at
            AttributeType: S
        KeySchema:
          - AttributeName: team_board_id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: team_board_id_next_cycle_at
            KeySchema:
              - AttributeName: team_board_id
                KeyType: HASH
              - AttributeName: next_cycle_at
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: team_board_id_name
            KeySchema:
              - AttributeName: team_board_id
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
        BillingMode: PAY_PER_REQUEST

    #######################################
    # Insights Cycles Table
    ######################################      
    CyclesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.insights_cycles_table}
        AttributeDefinitions:
          - AttributeName: team_board_id_name
            AttributeType: S
          - AttributeName: before
            AttributeType: S
        KeySchema:
          - AttributeName: team_board_id_name
            KeyType: HASH
          - AttributeName: before
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    #####################################
    # Kanbanize Imports Bucket
    ####################################a
    
    KanbanizeImportBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-kanbanize-imports
